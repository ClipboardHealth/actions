name: "Prepare infrastructure"
description: "Creates terraform workspace"
inputs:
  SERVICE_NAME:
    description: "The service, usually repo name"
    required: true
  ENVIRONMENT_NAME:
    description: "Environment name can be (production, staging, development, gamma-XXX)"
    required: true
  TERRAFORM_TAG_LIST:
    description: "A comma-separated list of desired tags"
    required: true
  TERRAFORM_PATH:
    description: "Location of terraform files in this repo"
    default: terraform
    required: true
  TERRAFORM_TOKEN:
    description: "Terraform Cloud Token"
    required: true
  TERRAFORM_VAR_PATH:
    description: "A path to .tfvars file."
    default: ""
    required: false

runs:
  using: "composite"
  steps:
    - name: Check dependencies
      shell: sh
      run: |
        SUCCESS="Dependencies matched"
        ERROR="Please install jq on your pipeline"
        (which jq 2>&1 1>/dev/null && echo $SUCCESS && exit 0) || (echo $ERROR && exit 1)

    - name: "Create TF_WORKSPACE variable"
      shell: sh
      env:
        ENVIRONMENT_NAME: ${{ inputs.ENVIRONMENT_NAME }}
      run: |
        ENVIRONMENT_NAME_SANITIZED=$(echo "$ENVIRONMENT_NAME" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
        echo "TF_WORKSPACE=${ENVIRONMENT_NAME_SANITIZED}" >> $GITHUB_ENV

    - name: Create TFC Workspace
      shell: sh
      env:
        SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
        ENVIRONMENT_NAME: ${{ inputs.ENVIRONMENT_NAME }}
        TERRAFORM_TOKEN: ${{ inputs.TERRAFORM_TOKEN }}
        TERRAFORM_TAG_LIST: ${{ inputs.TERRAFORM_TAG_LIST }}
      run: ${{ github.action_path }}/create-tfc-workspace.sh

    - uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ inputs.TERRAFORM_TOKEN }}

    - name: Prepare custom terraform variables
      shell: sh
      env:
        TERRAFORM_PATH: ${{ inputs.TERRAFORM_PATH }}
        TERRAFORM_VAR_PATH: ${{ inputs.TERRAFORM_VAR_PATH }}
      run: |
        DEST="generated.auto.tfvars"
        if [ "$TERRAFORM_VAR_PATH" != "" ]; then
          echo "Customized variables will be copied to ${DEST}"
          cp -v "$TERRAFORM_VAR_PATH" "${TERRAFORM_PATH}/${DEST}"
        else
          echo "No custom variable file provided."
        fi

    - name: Terraform lint
      shell: sh
      working-directory: ${{ inputs.TERRAFORM_PATH }}
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      shell: sh
      working-directory: ${{ inputs.TERRAFORM_PATH }}
      run: terraform init -input=false

    - name: Terraform Validate
      shell: sh
      working-directory: ${{ inputs.TERRAFORM_PATH }}
      id: validate
      run: terraform validate -no-color

    - name: Terraform apply
      shell: sh
      working-directory: ${{ inputs.TERRAFORM_PATH }}
      run: terraform apply --auto-approve

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ github.token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
          #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          *Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.TERRAFORM_PATH }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          const reqBody = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          }
          if (botComment) {
            github.rest.issues.updateComment({...reqBody, comment_id: botComment.id})
          } else {
            github.rest.issues.createComment({...reqBody, issue_number: context.issue.number})
          }
